package tm;


import java.awt.Dimension;
import java.awt.Rectangle;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.DefaultCaret;
import tm.Image.Filter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author droma
 * TODO:
 * - Implement handmade ser/deser
 */
public class gui_frame extends javax.swing.JFrame implements Observer {
    
    /*private File selectedFile = new File(System.getProperty("user.home") 
            + "\\Dropbox\\WORK\\0_ASSIGNATURES\\"
            + "0_Tecnologia_de_Sistemes_Multimedia\\1415\\3_SVN\\shared\\img.zip");*/
            //"F:\\Mis Documentos\\Dropbox\\WORK\\0_ASSIGNATURES" +
             //"\\0_Tecnologia_de_Sistemes_Multimedia\\1415\\3_SVN\\shared\\");
    private File selectedFile = new File(System.getProperty("user.dir"));
    //private JLabel imgAreaOri;
    private Boolean fileSelected = false;
    private Boolean updating = false;
    private VideoPlayer video;
    private Codec encoder;
    
    private final float DEF_CORTH   = 2.0f;
    private final short DEF_NTES    = 20;
    private final short DEF_NMOV    = 5;
    private final byte  DEF_GOP     = 25;

    //TODO: Make this parameters accessible from the GUI
    private float corTh; //5.0f
    private short nTeselas; // 32
    private short nMov; //5
    private byte gop; 
    
    /**
     * Creates new form gui_frame
     */
    public gui_frame() {
        initComponents();
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jCheckBoxMenuItem2 = new javax.swing.JCheckBoxMenuItem();
        pixelTransBG = new javax.swing.ButtonGroup();
        jLabel2 = new JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        consoleOutput = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        loadZip = new javax.swing.JButton();
        savePNG = new javax.swing.JButton();
        loadInter = new javax.swing.JButton();
        saveInterJPG = new javax.swing.JButton();
        saveJPG = new javax.swing.JButton();
        saveInterZIP = new javax.swing.JButton();
        jLabel1 = new JLabel();
        saveJPGZip = new javax.swing.JButton();
        loadImg = new javax.swing.JButton();
        statsButton = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        panelTitle = new JLabel();
        brightnessSlider = new JSlider();
        hueSlider = new JSlider();
        brightnessText = new javax.swing.JTextField();
        hueText = new javax.swing.JTextField();
        channelRonly = new javax.swing.JRadioButton();
        selBWFilter = new javax.swing.JRadioButton();
        channelBonly = new javax.swing.JRadioButton();
        jSeparator1 = new javax.swing.JSeparator();
        channelGonly = new javax.swing.JRadioButton();
        selNegFilter = new javax.swing.JRadioButton();
        selGrayFilter = new javax.swing.JRadioButton();
        selMeanFilter = new javax.swing.JRadioButton();
        selOri = new javax.swing.JRadioButton();
        selHPfilter = new javax.swing.JRadioButton();
        selLPFilter = new javax.swing.JRadioButton();
        selXgrad = new javax.swing.JRadioButton();
        selYgrad = new javax.swing.JRadioButton();
        selTotalGrad = new javax.swing.JRadioButton();
        selIsoGrad = new javax.swing.JRadioButton();
        saturationText = new javax.swing.JTextField();
        saturationSlider = new JSlider();
        jLabel4 = new JLabel();
        jLabel5 = new JLabel();
        jLabel6 = new JLabel();
        jPanel3 = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        jLabel3 = new JLabel();
        playButton = new javax.swing.JButton();
        stopButton = new javax.swing.JButton();
        encodeVideoButton = new javax.swing.JButton();
        decodeVideoButton = new javax.swing.JButton();
        jLabel7 = new JLabel();
        nTesText = new javax.swing.JTextField();
        jLabel8 = new JLabel();
        nMovText = new javax.swing.JTextField();
        jLabel9 = new JLabel();
        GOPText = new javax.swing.JTextField();
        jLabel10 = new JLabel();
        corThText = new javax.swing.JTextField();

        jCheckBoxMenuItem2.setSelected(true);
        jCheckBoxMenuItem2.setText("jCheckBoxMenuItem2");

        jLabel2.setText("jLabel2");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new Dimension(522, 517));

        jScrollPane1.setAutoscrolls(true);

        consoleOutput.setEditable(false);
        consoleOutput.setColumns(20);
        consoleOutput.setLineWrap(true);
        consoleOutput.setRows(5);
        consoleOutput.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(consoleOutput);
        DefaultCaret caret = (DefaultCaret)consoleOutput.getCaret();
        caret.setUpdatePolicy(DefaultCaret.ALWAYS_UPDATE);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(null, java.awt.Color.lightGray));

        loadZip.setText("Load Zip File");
        loadZip.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                loadZipMousePressed(evt);
            }
        });
        loadZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadZipActionPerformed(evt);
            }
        });

        savePNG.setText("Save Images PNG");
        savePNG.setEnabled(false);
        savePNG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                savePNGActionPerformed(evt);
            }
        });

        loadInter.setText("Load Encoded Files");
        loadInter.setActionCommand("Load Inter File");
        loadInter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadInterActionPerformed(evt);
            }
        });

        saveInterJPG.setText("Save Encoded JPG");
        saveInterJPG.setEnabled(false);
        saveInterJPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveInterJPGActionPerformed(evt);
            }
        });

        saveJPG.setText("Save Images JPG");
        saveJPG.setEnabled(false);
        saveJPG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJPGActionPerformed(evt);
            }
        });

        saveInterZIP.setText("Save Encoded Files");
        saveInterZIP.setActionCommand("Save Inter Zip File");
        saveInterZIP.setEnabled(false);
        saveInterZIP.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveInterZIPActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("File Operation");

        saveJPGZip.setText("Save JPG Zip");
        saveJPGZip.setEnabled(false);
        saveJPGZip.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveJPGZipActionPerformed(evt);
            }
        });

        loadImg.setText("Load Image");
        loadImg.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                loadImgMousePressed(evt);
            }
        });
        loadImg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadImgActionPerformed(evt);
            }
        });

        statsButton.setText("Stats");
        statsButton.setActionCommand("Load Inter File");
        statsButton.setEnabled(false);
        statsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                statsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(saveJPGZip, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveInterZIP, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(saveInterJPG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadInter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveJPG, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(savePNG, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadZip, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(loadImg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(statsButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadImg)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadZip)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(savePNG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveJPG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveJPGZip)
                .addGap(18, 18, 18)
                .addComponent(saveInterJPG)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(saveInterZIP)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(loadInter)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(statsButton)
                .addGap(13, 13, 13))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {loadInter, loadZip, saveInterJPG, saveInterZIP, saveJPG, savePNG});

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        panelTitle.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        panelTitle.setText("Pixel Transformation");

        brightnessSlider.setMajorTickSpacing(25);
        brightnessSlider.setMinimum(-100);
        brightnessSlider.setMinorTickSpacing(10);
        brightnessSlider.setValue(0);
        brightnessSlider.setEnabled(false);
        brightnessSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                brightnessSliderStateChanged(evt);
            }
        });

        hueSlider.setMajorTickSpacing(25);
        hueSlider.setMinimum(-100);
        hueSlider.setMinorTickSpacing(20);
        hueSlider.setValue(0);
        hueSlider.setEnabled(false);
        hueSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                hueSliderStateChanged(evt);
            }
        });

        brightnessText.setText("0");
        brightnessText.setEnabled(false);
        brightnessText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                brightnessTextActionPerformed(evt);
            }
        });

        hueText.setText("0");
        hueText.setEnabled(false);
        hueText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hueTextActionPerformed(evt);
            }
        });

        pixelTransBG.add(channelRonly);
        channelRonly.setText("R channel only");
        channelRonly.setEnabled(false);
        channelRonly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelRonlyActionPerformed(evt);
            }
        });

        pixelTransBG.add(selBWFilter);
        selBWFilter.setText("Binary filter");
        selBWFilter.setEnabled(false);
        selBWFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selBWFilterActionPerformed(evt);
            }
        });

        pixelTransBG.add(channelBonly);
        channelBonly.setText("B channel only");
        channelBonly.setEnabled(false);
        channelBonly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelBonlyActionPerformed(evt);
            }
        });

        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);

        pixelTransBG.add(channelGonly);
        channelGonly.setText("G channel only");
        channelGonly.setEnabled(false);
        channelGonly.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                channelGonlyActionPerformed(evt);
            }
        });

        pixelTransBG.add(selNegFilter);
        selNegFilter.setText("Negative");
        selNegFilter.setEnabled(false);
        selNegFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selNegFilterActionPerformed(evt);
            }
        });

        pixelTransBG.add(selGrayFilter);
        selGrayFilter.setText("Gray filter");
        selGrayFilter.setEnabled(false);
        selGrayFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selGrayFilterActionPerformed(evt);
            }
        });

        pixelTransBG.add(selMeanFilter);
        selMeanFilter.setText("Average filter");
        selMeanFilter.setEnabled(false);
        selMeanFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selMeanFilterActionPerformed(evt);
            }
        });

        pixelTransBG.add(selOri);
        selOri.setSelected(true);
        selOri.setText("Original");
        selOri.setEnabled(false);
        selOri.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selOriActionPerformed(evt);
            }
        });

        pixelTransBG.add(selHPfilter);
        selHPfilter.setText("High-pass filter");
        selHPfilter.setEnabled(false);
        selHPfilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selHPfilterActionPerformed(evt);
            }
        });

        pixelTransBG.add(selLPFilter);
        selLPFilter.setText("Low-pass filter");
        selLPFilter.setEnabled(false);
        selLPFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selLPFilterActionPerformed(evt);
            }
        });

        pixelTransBG.add(selXgrad);
        selXgrad.setText("X gradient");
        selXgrad.setEnabled(false);
        selXgrad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selXgradActionPerformed(evt);
            }
        });

        pixelTransBG.add(selYgrad);
        selYgrad.setText("Y gradient");
        selYgrad.setEnabled(false);
        selYgrad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selYgradActionPerformed(evt);
            }
        });

        pixelTransBG.add(selTotalGrad);
        selTotalGrad.setText("Total gradient");
        selTotalGrad.setEnabled(false);
        selTotalGrad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selTotalGradActionPerformed(evt);
            }
        });

        pixelTransBG.add(selIsoGrad);
        selIsoGrad.setText("Laplacian");
        selIsoGrad.setEnabled(false);
        selIsoGrad.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selIsoGradActionPerformed(evt);
            }
        });

        saturationText.setText("0");
        saturationText.setEnabled(false);
        saturationText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saturationTextActionPerformed(evt);
            }
        });

        saturationSlider.setMajorTickSpacing(25);
        saturationSlider.setMinimum(-100);
        saturationSlider.setMinorTickSpacing(10);
        saturationSlider.setValue(0);
        saturationSlider.setEnabled(false);
        saturationSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                saturationSliderStateChanged(evt);
            }
        });

        jLabel4.setText("Brightness");

        jLabel5.setText("Hue");

        jLabel6.setText("Saturation");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(panelTitle, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(100, 100, 100))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5))
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(brightnessText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel2Layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addComponent(hueText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(brightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(hueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(channelBonly)
                                .addComponent(channelRonly)
                                .addComponent(channelGonly)
                                .addComponent(selOri, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(jPanel2Layout.createSequentialGroup()
                                    .addGap(10, 10, 10)
                                    .addComponent(jLabel6)
                                    .addGap(18, 18, 18)
                                    .addComponent(saturationText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(saturationSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 148, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 11, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(selBWFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selNegFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selGrayFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selMeanFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selHPfilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selLPFilter, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selXgrad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selYgrad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selTotalGrad, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(selIsoGrad, javax.swing.GroupLayout.Alignment.TRAILING))
                        .addGap(33, 33, 33))))
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {channelBonly, channelGonly, channelRonly, selOri});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {selBWFilter, selGrayFilter, selHPfilter, selIsoGrad, selLPFilter, selMeanFilter, selNegFilter, selTotalGrad, selXgrad, selYgrad});

        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panelTitle)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(19, 19, 19)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(brightnessText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(brightnessSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(hueText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hueSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(7, 7, 7)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(saturationText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel6))
                                .addGap(5, 5, 5)
                                .addComponent(saturationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(channelRonly)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(channelGonly)
                                .addGap(3, 3, 3)
                                .addComponent(channelBonly)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selOri))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addComponent(selBWFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selNegFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selGrayFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selMeanFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selHPfilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selLPFilter)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selXgrad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selYgrad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selTotalGrad)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(selIsoGrad)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {channelBonly, channelGonly, channelRonly, selOri});

        jPanel2Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {selBWFilter, selGrayFilter, selHPfilter, selIsoGrad, selLPFilter, selMeanFilter, selNegFilter, selTotalGrad, selXgrad, selYgrad});

        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        backButton.setIcon(new ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Rewind16.gif"))); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        forwardButton.setIcon(new ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/FastForward16.gif"))); // NOI18N
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("Video controls");

        playButton.setIcon(new ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Play16.gif"))); // NOI18N
        playButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playButtonActionPerformed(evt);
            }
        });

        stopButton.setIcon(new ImageIcon(getClass().getResource("/toolbarButtonGraphics/media/Stop16.gif"))); // NOI18N
        stopButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                stopButtonActionPerformed(evt);
            }
        });

        encodeVideoButton.setText("Encode video");
        encodeVideoButton.setEnabled(false);
        encodeVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                encodeVideoButtonActionPerformed(evt);
            }
        });

        decodeVideoButton.setText("Decode video");
        decodeVideoButton.setEnabled(false);
        decodeVideoButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                decodeVideoButtonActionPerformed(evt);
            }
        });

        jLabel7.setText("#Teselas");

        nTesText.setText(Short.toString(this.DEF_NTES)
        );
        nTesText.setEnabled(false);
        nTesText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nTesTextActionPerformed(evt);
            }
        });

        jLabel8.setText("#Mov");

        nMovText.setText(Short.toString(this.DEF_NMOV)
        );
        nMovText.setEnabled(false);
        nMovText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nMovTextActionPerformed(evt);
            }
        });

        jLabel9.setText("GOP");

        GOPText.setText(Byte.toString(this.DEF_GOP)
        );
        GOPText.setEnabled(false);
        GOPText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GOPTextActionPerformed(evt);
            }
        });

        jLabel10.setText("Corr. Th.");

        corThText.setText(Float.toString(this.DEF_CORTH)
        );
        corThText.setEnabled(false);
        corThText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                corThTextActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel3))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(encodeVideoButton)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nTesText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(nMovText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel9)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(GOPText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addComponent(decodeVideoButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(backButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(playButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(stopButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(forwardButton)))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(corThText, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(nTesText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(nMovText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel9)
                            .addComponent(GOPText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)
                            .addComponent(corThText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(backButton)
                            .addComponent(playButton)
                            .addComponent(stopButton)
                            .addComponent(forwardButton)))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(encodeVideoButton)
                        .addGap(8, 8, 8)
                        .addComponent(decodeVideoButton)))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(9, 9, 9)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void loadZipMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadZipMousePressed

    }//GEN-LAST:event_loadZipMousePressed

    private void savePNGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_savePNGActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(this.selectedFile);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File outDir = fc.getSelectedFile();
            if (!this.fileSelected) {
                String msg = "Image zip file not read\n"; 
                System.err.print(msg);
                this.consoleOutput.append(msg);
            } else {
                this.video.writeImages("png", outDir);
                this.consoleOutput.append("Finished saving PNG images\n");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No output directory selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No output directory selected\n");
        }

    }//GEN-LAST:event_savePNGActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        this.video.setBackward();
        this.video.fastForward();
    }//GEN-LAST:event_backButtonActionPerformed

    private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
        this.video.setForward();
        this.video.fastForward();
    }//GEN-LAST:event_forwardButtonActionPerformed

    private void loadInterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadInterActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(selectedFile);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Zip files", "zip");
        fc.setFileFilter(filter);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.selectedFile = fc.getSelectedFile();
            GZip gzip = new GZip(selectedFile, consoleOutput);
            if (gzip.isValidZip()) {
                this.updating = true;
                if (this.fileSelected) 
                    clear();
                else 
                    this.fileSelected = true;
                init(gzip.readZipImages());
                this.updating = false;
                consoleOutput.append("Zip loaded\n");
            } else {
            JOptionPane.showMessageDialog(null, "Error reading zip file", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("Error reading zip file\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "No ZIP file selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No file selected\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
        }
        fc = new JFileChooser();
        fc.setCurrentDirectory(selectedFile);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.selectedFile = fc.getSelectedFile();
            this.encoder = new Codec(video.getImgArray(), this.consoleOutput);
            this.encoder.readTeselas(selectedFile);
            disableForEncoding();
            this.encoder.startEncoding();
            encodeVideoButton.setEnabled(false);
            nTesText.setEnabled(false);
            nMovText.setEnabled(false);
            GOPText.setEnabled(false);
            corThText.setEnabled(false);
        } else {
            JOptionPane.showMessageDialog(null, "No tesela file selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No file selected\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
        }

    }//GEN-LAST:event_loadInterActionPerformed

    private void saveInterJPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveInterJPGActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(this.selectedFile);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File outDir = fc.getSelectedFile();
            if (!this.fileSelected) {
                String msg = "Image zip file not read\n"; 
                System.err.print(msg);
                this.consoleOutput.append(msg);
            } else {
                this.video.writeImages("jpg", outDir);
                this.consoleOutput.append("Finished saving JPG images\n");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No output directory selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No output directory selected\n");
        }
    }//GEN-LAST:event_saveInterJPGActionPerformed

    private void saveJPGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJPGActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(this.selectedFile);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            File outDir = fc.getSelectedFile();
            if (!this.fileSelected) {
                String msg = "Image zip file not read\n"; 
                System.err.print(msg);
                this.consoleOutput.append(msg);
            } else {
                this.video.writeImages("jpg", outDir);
                this.consoleOutput.append("Finished saving JPG images\n");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No output directory selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No output directory selected\n");
        }
    }//GEN-LAST:event_saveJPGActionPerformed

    private void saveInterZIPActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveInterZIPActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(selectedFile);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            String fileName = JOptionPane.showInputDialog(null,
                    "File name", "jpg.zip");
            try {
                GZip gzip = new GZip();
                String fName = gzip.writeZipImages(this.video.getImgArray(), 
                        fc.getSelectedFile(), "jpg", fileName, false);
                this.consoleOutput.append("ZIP with jpg images created at " + fName);
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Output directory not found", "Cancel", JOptionPane.ERROR_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "IO error writing zip", "Cancel", JOptionPane.ERROR_MESSAGE);
            }
            fileName = JOptionPane.showInputDialog(null,
                    "Tesela file name", "tes.gzip");
            File fileOut = new File(fc.getSelectedFile() + File.separator +  fileName);
            this.encoder.saveCustTes(fileOut);
        } else {
            JOptionPane.showMessageDialog(null, "No file selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No file selected\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
        }
    }//GEN-LAST:event_saveInterZIPActionPerformed

    private void loadZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadZipActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(selectedFile);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        FileNameExtensionFilter filter = new FileNameExtensionFilter("Zip files", "zip");
        fc.setFileFilter(filter);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            this.selectedFile = fc.getSelectedFile();
            GZip gzip = new GZip(selectedFile, consoleOutput);
            if (gzip.isValidZip()) {
                this.updating = true;
                if (this.fileSelected) 
                    clear();
                else 
                    this.fileSelected = true;
                init(gzip.readZipImages());
                this.updating = false;
                consoleOutput.append("Zip loaded\n");
            } else {
            JOptionPane.showMessageDialog(null, "Error reading zip file", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("Error reading zip file\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
            }
        } else {
            JOptionPane.showMessageDialog(null, "No file selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No file selected\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
        }
    }//GEN-LAST:event_loadZipActionPerformed

    private void saveJPGZipActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveJPGZipActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(selectedFile);
        fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            String fileName = JOptionPane.showInputDialog(null,
                    "File name", "jpg.zip");
            try {
                GZip gzip = new GZip();
                //TODO: Zip file corrupted
                String fName = gzip.writeZipImages(this.video.getImgArray(),
                        fc.getSelectedFile(), "jpg", fileName, false);
                this.consoleOutput.append("ZIP with jpg images created at " + fName);
            } catch (FileNotFoundException e) {
                JOptionPane.showMessageDialog(null, "Output directory not found", "Cancel", JOptionPane.ERROR_MESSAGE);
            } catch (IOException e) {
                JOptionPane.showMessageDialog(null, "IO error writing zip", "Cancel", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(null, "No file selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No file selected\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
        }
    }//GEN-LAST:event_saveJPGZipActionPerformed

    private void loadImgMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadImgMousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_loadImgMousePressed

    private void loadImgActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadImgActionPerformed
        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(selectedFile);
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //FileNameExtensionFilter filter = new FileNameExtensionFilter("Image file", "");
        //fc.setFileFilter(filter);
        int result = fc.showOpenDialog(null);
        if (result == JFileChooser.APPROVE_OPTION) {
            Image img = new Image();
            Boolean err = false;
            try {
                img = new Image(fc.getSelectedFile());
            } catch (Exception e) {
                JOptionPane.showMessageDialog(null, "Error reading image file", "Cancel", JOptionPane.WARNING_MESSAGE);
                consoleOutput.append("Error reading image file\n");
                if (!this.fileSelected) 
                    this.fileSelected = false;
                err = true;
            } 
            if (! err) {
                this.updating = true;
                if (this.fileSelected) 
                    clear();
                else
                    this.fileSelected = true;
                ArrayList<Image> imgArr = new ArrayList<Image>();
                imgArr.add(img);
                init(imgArr);
                this.updating = false;
                consoleOutput.append("Image loaded\n");
            }
        } else {
            JOptionPane.showMessageDialog(null, "No file selected", "Cancel", JOptionPane.WARNING_MESSAGE);
            consoleOutput.append("No file selected\n");
            if (!this.fileSelected) 
                this.fileSelected = false;
        }
    }//GEN-LAST:event_loadImgActionPerformed

    private void playButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playButtonActionPerformed
        this.video.changeState(VideoPlayer.State.RUN);
    }//GEN-LAST:event_playButtonActionPerformed

    private void stopButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_stopButtonActionPerformed
        this.video.changeState(VideoPlayer.State.STOP);
        //this.video.stop();
    }//GEN-LAST:event_stopButtonActionPerformed

    private void encodeVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_encodeVideoButtonActionPerformed
        disableForEncoding();
        this.gop = (byte) Integer.parseUnsignedInt(GOPText.getText()) ;
        this.corTh = Float.parseFloat(corThText.getText());
        this.nTeselas = (short) Integer.parseUnsignedInt(nTesText.getText());
        this.nMov = (short) Integer.parseUnsignedInt(nMovText.getText());
        this.encoder = new Codec(this.corTh, this.nTeselas, this.nMov, this.gop, 
                video.getImgArray(), this.consoleOutput);
        this.encoder.addObserver(this);
        this.encoder.startEncoding();
    }//GEN-LAST:event_encodeVideoButtonActionPerformed

    private void saturationSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_saturationSliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            float newSaturation = (float) source.getValue();
            if (newSaturation != this.video.getSaturation() && !this.updating) {
                this.video.setSaturation(newSaturation);
                saturationText.setText(Integer.toString((int) this.video.getSaturation()));
            }
        }
    }//GEN-LAST:event_saturationSliderStateChanged

    private void saturationTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saturationTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saturationTextActionPerformed

    private void selIsoGradActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selIsoGradActionPerformed
        this.video.changeFilter(Filter.LAPLACE, true);
    }//GEN-LAST:event_selIsoGradActionPerformed

    private void selTotalGradActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selTotalGradActionPerformed
        this.video.changeFilter(Filter.TOTAL_GRAD, true);
    }//GEN-LAST:event_selTotalGradActionPerformed

    private void selYgradActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selYgradActionPerformed
        this.video.changeFilter(Filter.Y_GRAD, true);
    }//GEN-LAST:event_selYgradActionPerformed

    private void selXgradActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selXgradActionPerformed
        this.video.changeFilter(Filter.X_GRAD, true);
    }//GEN-LAST:event_selXgradActionPerformed

    private void selLPFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selLPFilterActionPerformed
        this.video.changeFilter(Filter.LOW_PASS, true);
    }//GEN-LAST:event_selLPFilterActionPerformed

    private void selHPfilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selHPfilterActionPerformed
        this.video.changeFilter(Filter.HIGH_PASS, true);
    }//GEN-LAST:event_selHPfilterActionPerformed

    private void selOriActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selOriActionPerformed
        this.video.setBrightness(0);
        this.video.setSaturation(0);
        this.video.setHue(0);
        this.video.changeFilter(Filter.ORIGINAL, true);
        this.brightnessSlider.setValue(0);
        this.hueSlider.setValue(0);
        this.saturationSlider.setValue(0);
        this.brightnessText.setText("0");
        this.hueText.setText("0");
        this.saturationText.setText("0");
    }//GEN-LAST:event_selOriActionPerformed

    private void selMeanFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selMeanFilterActionPerformed
        this.video.changeFilter(Filter.MEAN, true);
    }//GEN-LAST:event_selMeanFilterActionPerformed

    private void selGrayFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selGrayFilterActionPerformed
        this.video.changeFilter(Filter.GRAY, true);
    }//GEN-LAST:event_selGrayFilterActionPerformed

    private void selNegFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selNegFilterActionPerformed
        this.video.changeFilter(Filter.NEGATIVE, true);
    }//GEN-LAST:event_selNegFilterActionPerformed

    private void channelGonlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelGonlyActionPerformed
        this.video.changeFilter(Filter.G_CHANNEL, true);
    }//GEN-LAST:event_channelGonlyActionPerformed

    private void channelBonlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelBonlyActionPerformed
        this.video.changeFilter(Filter.B_CHANNEL, true);
    }//GEN-LAST:event_channelBonlyActionPerformed

    private void selBWFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selBWFilterActionPerformed
        int binaryTh;
        try {
            binaryTh = Integer.parseInt(JOptionPane.showInputDialog(null, "Threshold value", 100));
        } catch (NumberFormatException e) {
            binaryTh = 64;
            this.consoleOutput.append("Invalid value for binary filter, using default value of "
                + Integer.toString(binaryTh) + ".\n");
        }
        this.video.setBinaryTh(binaryTh);
        this.video.changeFilter(Filter.BINARY, true);
    }//GEN-LAST:event_selBWFilterActionPerformed

    private void channelRonlyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_channelRonlyActionPerformed
        this.video.changeFilter(Filter.R_CHANNEL, true);
    }//GEN-LAST:event_channelRonlyActionPerformed

    private void hueTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hueTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_hueTextActionPerformed

    private void brightnessTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_brightnessTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_brightnessTextActionPerformed

    private void hueSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_hueSliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            float newHue = (float) source.getValue();
            if (newHue != this.video.getHue() && !this.updating) {
                this.video.setHue(newHue);
                hueText.setText(Integer.toString((int) this.video.getHue()));
            }
        }
    }//GEN-LAST:event_hueSliderStateChanged

    private void brightnessSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_brightnessSliderStateChanged
        JSlider source = (JSlider)evt.getSource();
        if (!source.getValueIsAdjusting()) {
            float newBrightness = (float) source.getValue();
            if (newBrightness != this.video.getBrightness() && !this.updating) {
                this.video.setBrightness(newBrightness);
                brightnessText.setText(Integer.toString((int) this.video.getBrightness()));
            }
        }
    }//GEN-LAST:event_brightnessSliderStateChanged

    private void decodeVideoButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_decodeVideoButtonActionPerformed
        disableForEncoding();
        this.encoder.startEncoding();
    }//GEN-LAST:event_decodeVideoButtonActionPerformed

    private void nTesTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nTesTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nTesTextActionPerformed

    private void nMovTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nMovTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nMovTextActionPerformed

    private void GOPTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GOPTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_GOPTextActionPerformed

    private void corThTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_corThTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_corThTextActionPerformed

    private void statsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_statsButtonActionPerformed
        try {
            File tmpDir = new File(System.getProperty("java.io.tmpdir"));
            GZip gzip = new GZip();
            String pngName = gzip.writeZipImages(this.video.getImgArray(),
                    tmpDir, "png", "pngImg.zip", false);
            String oriName = gzip.writeZipImages(this.video.getImgArray(),
                    tmpDir, "jpg", "jpgImg.zip", false);
            String modName = gzip.writeZipImages(this.video.getImgArray(),
                    tmpDir, "jpg", "modImg.zip", true);
            File tesFile = File.createTempFile("tmp", null);
            this.encoder.saveCustTes(tesFile);
            long pngSize = new File(pngName).length();
            pngSize /= 1000;
            long oriSize = new File(oriName).length();
            oriSize /= 1000;
            long encSize = new File(modName).length();
            encSize /= 1000;
            long tesSize = tesFile.length() / 1000;
            consoleOutput.append("PNG Original Zip size:\t" + pngSize + " KB \n");
            consoleOutput.append("JPG Original Zip size:\t" + oriSize + " KB \n");
            consoleOutput.append("JPG Encoded Zip size:\t" + encSize + " KB \n");
            consoleOutput.append("Tesela file size:\t\t" + tesSize + " KB \n");
            consoleOutput.append("Total encoded size:\t\t" + (tesSize+encSize) + " KB \n");
            float imp = (float) ((oriSize-(tesSize+encSize)) * 100.0 / (float) oriSize);
            consoleOutput.append("Improvement of size respect to JPG:\t" + imp + " % \n");
            imp = (float) ((pngSize-(tesSize+encSize)) * 100.0 / (float) pngSize);
            consoleOutput.append("Improvement of size respect to PNG:\t" + imp + " % \n");
        } catch (IOException ex) {
            Logger.getLogger(gui_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_statsButtonActionPerformed
    
    private void clear() {
        /*this.imgFrameOri.dispose();
        this.imgFrameMod.dispose();
        this.imgArray.clear();
        this.idn = 0;*/
        this.selOri.setSelected(true);
        this.brightnessSlider.setValue(0);
        this.hueSlider.setValue(0);
        this.saturationSlider.setValue(0);
        this.brightnessText.setText("0");
        this.hueText.setText("0");
        this.saturationText.setText("0");
        this.video.clear();
    }
    
    private void init(ArrayList<Image> imgArray) {
        this.video = new VideoPlayer(imgArray, this.consoleOutput);
        enableTools();
    }    
    
    private void enableTools() {
        savePNG.setEnabled(true);
        saveJPG.setEnabled(true);
        saveJPGZip.setEnabled(true);
        channelBonly.setEnabled(true);
        channelGonly.setEnabled(true);
        channelRonly.setEnabled(true);
        brightnessSlider.setEnabled(true);
        //brightnessText.setEnabled(true);
        hueSlider.setEnabled(true);
        //hueText.setEnabled(true);
        selBWFilter.setEnabled(true);
        selGrayFilter.setEnabled(true);
        selHPfilter.setEnabled(true);
        selIsoGrad.setEnabled(true);
        selLPFilter.setEnabled(true);
        selMeanFilter.setEnabled(true);
        selNegFilter.setEnabled(true);
        selTotalGrad.setEnabled(true);
        selXgrad.setEnabled(true);
        selYgrad.setEnabled(true);
        selOri.setEnabled(true);
        saturationSlider.setEnabled(true);
        //saturationText.setEnabled(true);
        encodeVideoButton.setEnabled(true);
        corThText.setEnabled(true);
        nTesText.setEnabled(true);
        nMovText.setEnabled(true);
        GOPText.setEnabled(true);
    }
    
    public void disableForEncoding() {
        channelBonly.setEnabled(false);
        channelGonly.setEnabled(false);
        channelRonly.setEnabled(false);
        brightnessSlider.setEnabled(false);
        //brightnessText.setEnabled(true);
        hueSlider.setEnabled(false);
        //hueText.setEnabled(true);
        selBWFilter.setEnabled(false);
        selGrayFilter.setEnabled(false);
        selHPfilter.setEnabled(false);
        selIsoGrad.setEnabled(false);
        selLPFilter.setEnabled(false);
        selMeanFilter.setEnabled(false);
        selNegFilter.setEnabled(false);
        selTotalGrad.setEnabled(false);
        selXgrad.setEnabled(false);
        selYgrad.setEnabled(false);
        selOri.setEnabled(false);
        saturationSlider.setEnabled(false);
        //saturationText.setEnabled(true);
        encodeVideoButton.setEnabled(false);
        decodeVideoButton.setEnabled(false);
        corThText.setEnabled(false);
        nTesText.setEnabled(false);
        nMovText.setEnabled(false);
        GOPText.setEnabled(false);
        statsButton.setEnabled(false);
    }
    
    public void enableForEncoding() {
        enableTools();
    }
    
    @Override
    public void update(Observable obj, Object arg) {
        if(((Boolean) arg) == false) {
//            this.video.loadEncVideo(encoder.encVid);
            decodeVideoButton.setEnabled(true);
            saveInterJPG.setEnabled(true);
            saveInterZIP.setEnabled(true);
            statsButton.setEnabled(true);
        } 
        this.video.reloadModImg();  
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(gui_frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            Logger.getLogger(gui_frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            Logger.getLogger(gui_frame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            Logger.getLogger(gui_frame.class.getName()).log(Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new gui_frame().setVisible(true);
                instrWindow inst = new instrWindow();
                Rectangle size = gui_frame.getFrames()[0].getBounds();
                Rectangle sizeInst = inst.getBounds();
                inst.setLocation((size.width - sizeInst.width)/2, 
                        (size.height - sizeInst.height)/2);
                inst.setTitle("Instructions");
                inst.setVisible(true);
                inst.toFront();
                inst.repaint();
                inst.setFrame(inst);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField GOPText;
    private javax.swing.JButton backButton;
    private JSlider brightnessSlider;
    private javax.swing.JTextField brightnessText;
    private javax.swing.JRadioButton channelBonly;
    private javax.swing.JRadioButton channelGonly;
    private javax.swing.JRadioButton channelRonly;
    public javax.swing.JTextArea consoleOutput;
    private javax.swing.JTextField corThText;
    private javax.swing.JButton decodeVideoButton;
    private javax.swing.JButton encodeVideoButton;
    private javax.swing.JButton forwardButton;
    private JSlider hueSlider;
    private javax.swing.JTextField hueText;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem2;
    private JLabel jLabel1;
    private JLabel jLabel10;
    private JLabel jLabel2;
    private JLabel jLabel3;
    private JLabel jLabel4;
    private JLabel jLabel5;
    private JLabel jLabel6;
    private JLabel jLabel7;
    private JLabel jLabel8;
    private JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    public javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JButton loadImg;
    private javax.swing.JButton loadInter;
    private javax.swing.JButton loadZip;
    private javax.swing.JTextField nMovText;
    private javax.swing.JTextField nTesText;
    private JLabel panelTitle;
    private javax.swing.ButtonGroup pixelTransBG;
    private javax.swing.JButton playButton;
    private JSlider saturationSlider;
    private javax.swing.JTextField saturationText;
    private javax.swing.JButton saveInterJPG;
    private javax.swing.JButton saveInterZIP;
    private javax.swing.JButton saveJPG;
    private javax.swing.JButton saveJPGZip;
    private javax.swing.JButton savePNG;
    private javax.swing.JRadioButton selBWFilter;
    private javax.swing.JRadioButton selGrayFilter;
    private javax.swing.JRadioButton selHPfilter;
    private javax.swing.JRadioButton selIsoGrad;
    private javax.swing.JRadioButton selLPFilter;
    private javax.swing.JRadioButton selMeanFilter;
    private javax.swing.JRadioButton selNegFilter;
    private javax.swing.JRadioButton selOri;
    private javax.swing.JRadioButton selTotalGrad;
    private javax.swing.JRadioButton selXgrad;
    private javax.swing.JRadioButton selYgrad;
    private javax.swing.JButton statsButton;
    private javax.swing.JButton stopButton;
    // End of variables declaration//GEN-END:variables
}
